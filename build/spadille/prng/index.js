'use strict';var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i['return'])_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr)){return arr}else if(Symbol.iterator in Object(arr)){return sliceIterator(arr,i)}else{throw new TypeError('Invalid attempt to destructure non-iterable instance')}}}();function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const hmac=require('../hmac');var _require=require('../utils');const makeRandomGen=_require.makeRandomGen,option=_require.option,splitInPieces=_require.splitInPieces,computeNumber=_require.computeNumber;const generate=(()=>{var _ref=_asyncToGenerator(function*(options){let secret=options.secret,payload=options.payload,minimum=options.minimum,maximum=options.maximum,amount=options.amount,distinct=options.distinct;minimum=option(minimum,1);maximum=option(maximum,60);amount=option(amount,6);distinct=option(distinct,true);if(distinct&&amount>maximum-minimum+1){throw Error('The number of balls [amount] must not be greater than the [(maximum - minimum) + 1] number of RNG when [distinct] flag is on!')}const seed=yield hmac.sign(secret,payload);const randomGen=makeRandomGen(minimum,maximum);const stream=yield splitInPieces(seed);const result=[];if(distinct){const cache={};let index=0;while(index<amount){const data=yield stream.generate();const number=computeNumber(randomGen,data);if(!cache[number.toString()]){cache[number.toString()]=true;index+=1;result.push(number)}}}else{for(let index=0;index<amount;index+=1){const data=yield stream.generate();const number=computeNumber(randomGen,data);result.push(number)}}return result});return function generate(_x){return _ref.apply(this,arguments)}})();const permute=(()=>{var _ref2=_asyncToGenerator(function*(options){const secret=options.secret,payload=options.payload,inputSequence=options.inputSequence;const ordering=yield generate({secret,payload,minimum:0,maximum:inputSequence.length-1,amount:inputSequence.length,distinct:true});return ordering.map(function(index){return inputSequence[index]})});return function permute(_x2){return _ref2.apply(this,arguments)}})();const pick=(()=>{var _ref3=_asyncToGenerator(function*(options){const secret=options.secret,payload=options.payload,sequence=options.sequence;const distinct=option(options.distinct,false);const amount=option(options.amount,1);const indexes=yield generate({secret,payload,minimum:0,maximum:sequence.length-1,amount,distinct});return indexes.map(function(index){return sequence[index]})});return function pick(_x3){return _ref3.apply(this,arguments)}})();const rand=(()=>{var _ref4=_asyncToGenerator(function*(secret,payload){const maximumInt=Math.pow(2,31);var _ref5=yield generate({secret,payload,minimum:0,maximum:maximumInt-1,amount:1}),_ref6=_slicedToArray(_ref5,1);const randomInt=_ref6[0];return randomInt/maximumInt});return function rand(_x4,_x5){return _ref4.apply(this,arguments)}})();module.exports.generate=generate;module.exports.permute=permute;module.exports.pick=pick;module.exports.rand=rand;