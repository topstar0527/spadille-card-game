'use strict';function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const utils=require('../utils');const prng=require('../prng');const megaSena=(()=>{var _ref=_asyncToGenerator(function*(secret,payload){const numbers=yield prng.generate({secret,payload});return utils.sortArrayNumber(numbers)});return function megaSena(_x,_x2){return _ref.apply(this,arguments)}})();const federal=(()=>{var _ref2=_asyncToGenerator(function*(secret,payload){const sequence=yield prng.generate({secret,payload,minimum:0,maximum:9,amount:5,distinct:false});return sequence.map(function(number){return number.toString()}).join('')});return function federal(_x3,_x4){return _ref2.apply(this,arguments)}})();module.exports.megaSena=megaSena;module.exports.federal=federal;